{"env_info": "sys.platform: linux\nPython: 3.8.0 (default, Nov  6 2019, 21:49:08) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: n/a\nPyTorch: 1.13.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0+cu116\nOpenCV: 4.8.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6", "seed": 4567, "exp_name": "unet_month3.py", "config": "work_dir = 'records/nested_unet_month3_seed_4567'\ndataset_type = 'MMDatasetV2'\nimg_norm_cfg = dict(\n    mean=[\n        0.485,\n        0.456,\n        0.406,\n    ], std=[\n        0.229,\n        0.224,\n        0.225,\n    ])\ninput_size = (\n    512,\n    512,\n)\ntrain_pre_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', binary=True, train=True),\n]\ntrain_post_pipeline = [\n    dict(type='SimpleResize', size=(\n        512,\n        512,\n    )),\n    dict(type='RandomFlip', prob=0.5),\n    dict(\n        type='Normalizev2',\n        mean=[\n            0.485,\n            0.456,\n            0.406,\n        ],\n        std=[\n            0.229,\n            0.224,\n            0.225,\n        ]),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=[\n        'img',\n        'gt_semantic_seg',\n    ]),\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='SimpleResize', size=(\n        512,\n        512,\n    )),\n    dict(\n        type='Normalizev2',\n        mean=[\n            0.485,\n            0.456,\n            0.406,\n        ],\n        std=[\n            0.229,\n            0.224,\n            0.225,\n        ]),\n    dict(type='ImageToTensor', keys=[\n        'img',\n    ]),\n    dict(type='Collect', keys=[\n        'img',\n    ]),\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='MMDatasetV2',\n        data_root='/mnt/d/ycp/data/month3',\n        ann_path='train.txt',\n        pipeline=[\n            [\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', binary=True, train=True),\n            ],\n            [\n                dict(type='SimpleResize', size=(\n                    512,\n                    512,\n                )),\n                dict(type='RandomFlip', prob=0.5),\n                dict(\n                    type='Normalizev2',\n                    mean=[\n                        0.485,\n                        0.456,\n                        0.406,\n                    ],\n                    std=[\n                        0.229,\n                        0.224,\n                        0.225,\n                    ]),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=[\n                    'img',\n                    'gt_semantic_seg',\n                ]),\n            ],\n        ]),\n    val=[\n        dict(\n            type='MMDatasetV2',\n            data_root='/mnt/d/ycp/data/month3',\n            ann_path='test.txt',\n            test_mode=True,\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='SimpleResize', size=(\n                    512,\n                    512,\n                )),\n                dict(\n                    type='Normalizev2',\n                    mean=[\n                        0.485,\n                        0.456,\n                        0.406,\n                    ],\n                    std=[\n                        0.229,\n                        0.224,\n                        0.225,\n                    ]),\n                dict(type='ImageToTensor', keys=[\n                    'img',\n                ]),\n                dict(type='Collect', keys=[\n                    'img',\n                ]),\n            ],\n            dataset_name='month3',\n            gt_seg_map_loader_cfg=dict(binary=True)),\n    ])\nnorm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='NestedUnetDetector',\n    base_model=dict(\n        type='NestedUNet',\n        num_classes=1,\n        input_channels=3,\n        deep_supervision=True,\n        vis_feature=False),\n    train_cfg=dict(\n        seg_loss=[\n            dict(type='BinaryDiceLoss', loss_weight=1.0),\n            dict(type='FocalLoss', loss_weight=1.0),\n        ],\n        seg_loss_weights=[\n            0.5,\n            0.3,\n            0.2,\n        ]),\n    test_cfg=dict())\noptimizer = dict(type='AdamW', lr=0.0001, weight_decay=0.0001)\noptimizer_config = dict()\nlr_config = dict(policy='CosineAnnealing', min_lr=1e-07, by_epoch=False)\ncheckpoint_config = dict(by_epoch=False, interval=150, max_keep_ckpts=1)\nrunner = dict(type='IterBasedRunner', max_iters=3000)\nevaluation = dict(\n    interval=150,\n    metric='mFscore',\n    pre_eval=True,\n    mean=False,\n    thresh=0.5,\n    img_thresh=0.5)\nlog_config = dict(\n    interval=50,\n    hooks=[\n        dict(type='TextLoggerHook', by_epoch=False),\n        dict(type='TensorboardLoggerHook'),\n    ])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [\n    (\n        'train',\n        1,\n    ),\n]\ncudnn_benchmark = True\nfind_unused_parameters = False\nauto_resume = False\ngpu_ids = range(0, 1)\nseed = 4567\n", "CLASSES": ["medium", "collagen"], "PALETTE": [0, 1]}
